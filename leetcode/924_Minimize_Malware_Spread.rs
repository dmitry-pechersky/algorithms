pub struct  Solution {}

impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        fn dfs(v: usize, graph: &Vec<Vec<i32>>, visited: &mut Vec<bool>, component: usize, vert_to_comp: &mut Vec<usize>) {
            visited[v] = true;
            vert_to_comp[v] = component;
            for u in 0..graph.len() {
                if graph[v][u] == 1 && ! visited[u as usize] {
                    dfs(u as usize, graph, visited, component, vert_to_comp)
                }
            }
        }

        let n = graph.len();
        let mut component = 0;
        let mut visited = vec![false; n];
        let mut vert_to_comp = vec![0; n];
        for v in 0..n {
            if ! visited[v] {
                dfs(v, &graph, &mut visited, component, &mut vert_to_comp);
                component += 1;
            }
        }

        let comp_n = component;
        let mut comp_lengths = vec![0; comp_n];
        for v in 0..n {
            comp_lengths[vert_to_comp[v]] += 1;
        }

        let mut comp_infected_cnt = vec![0; comp_n];
        for &v in initial.iter() {
            comp_infected_cnt[vert_to_comp[v as usize]] += 1;
        }

        let mut max_infected = 0;
        let mut max_infected_vert = initial[0];
        for &v in initial.iter() {
            let v_comp = vert_to_comp[v as usize];
            let v_infect = if comp_infected_cnt[v_comp] == 1 { comp_lengths[v_comp] } else { 0 };
            if v_infect >  max_infected {
                max_infected = v_infect;
                max_infected_vert = v;
            } else if v_infect ==  max_infected && v < max_infected_vert {
                max_infected_vert = v;
            }
        }
        max_infected_vert
    }
}

#[test]
fn test_min_malware_spread() {
    assert_eq!(
        0,
        Solution::min_malware_spread(
            vec![vec![1,1,0],vec![1,1,0],vec![0,0,1]],
            vec![0,1]
        )
    );

    assert_eq!(
        0,
        Solution::min_malware_spread(
            vec![vec![1,0,0],vec![0,1,0],vec![0,0,1]],
            vec![0,2]
        )
    );
}


